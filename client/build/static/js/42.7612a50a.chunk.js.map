{"version":3,"sources":["pages/dialogs/FeedbackDialog.jsx","../node_modules/@material-ui/core/esm/Slide/Slide.js"],"names":["Transition","React","forwardRef","props","ref","direction","useStyles","makeStyles","root","connect","state","designer","show","Clicked","handleClose","val","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","id","name","onClick","color","setTranslateValue","node","transform","rect","getBoundingClientRect","fakeTransform","computedStyle","window","getComputedStyle","getPropertyValue","offsetX","offsetY","transformValues","split","parseInt","concat","innerWidth","left","width","innerHeight","top","height","getTranslateValue","style","webkitTransform","defaultTimeout","enter","duration","enteringScreen","exit","leavingScreen","Slide","children","_props$direction","inProp","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","_props$timeout","timeout","_props$TransitionComp","other","_objectWithoutProperties","theme","useTheme","childrenRef","handleOwnRef","instance","current","ReactDOM","handleRefIntermediary","useForkRef","handleRef","normalizedTransitionCallback","callback","isAppearing","undefined","handleEnter","reflow","handleEntering","transitionProps","getTransitionProps","mode","webkitTransition","transitions","create","_extends","easing","easeOut","transition","handleEntered","handleExiting","handleExit","sharp","handleExited","updatePosition","handleResize","debounce","addEventListener","clear","removeEventListener","nodeRef","appear","childProps","visibility"],"mappings":"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","file":"static/js/42.7612a50a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Dialog, DialogActions, DialogContent, DialogTitle, DialogContentText, Button} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    root:{\r\n        \r\n    }\r\n})\r\n\r\nconst FeedbackDialog = ({designer, show, Clicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const handleClose = (val) => {\r\n        Clicked(val);\r\n    }\r\n\r\n    return (\r\n        <Dialog open={show} TransitionComponent={Transition} keepMounted onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-slide-title\" aria-describedby=\"alert-dialog-slide-description\">\r\n            <DialogTitle id=\"alert-dialog-slide-title\">Feedback</DialogTitle>\r\n            \r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                {designer && designer.name} is not assigned with you in this quarter. do you still want to give feedback.\r\n                </DialogContentText>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button onClick={()=>handleClose('no')} color=\"primary\"> no </Button>\r\n                <Button onClick={()=>handleClose('yes')} color=\"primary\"> yes </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nconst stateToProps = state => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nFeedbackDialog.propTypes = {\r\n    designer:PropTypes.object,\r\n    show:PropTypes.bool,\r\n    Clicked:PropTypes.func\r\n}\r\n\r\nexport default connect(stateToProps, null)(FeedbackDialog);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport debounce from '../utils/debounce';\nimport { Transition } from 'react-transition-group';\nimport { elementAcceptingRef } from '@material-ui/utils';\nimport useForkRef from '../utils/useForkRef';\nimport useTheme from '../styles/useTheme';\nimport { duration } from '../styles/transitions';\nimport { reflow, getTransitionProps } from '../transitions/utils'; // Translate the node so he can't be seen on the screen.\n// Later, we gonna translate back the node to his original location\n// with `none`.`\n\nfunction getTranslateValue(direction, node) {\n  var rect = node.getBoundingClientRect();\n  var transform;\n\n  if (node.fakeTransform) {\n    transform = node.fakeTransform;\n  } else {\n    var computedStyle = window.getComputedStyle(node);\n    transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');\n  }\n\n  var offsetX = 0;\n  var offsetY = 0;\n\n  if (transform && transform !== 'none' && typeof transform === 'string') {\n    var transformValues = transform.split('(')[1].split(')')[0].split(',');\n    offsetX = parseInt(transformValues[4], 10);\n    offsetY = parseInt(transformValues[5], 10);\n  }\n\n  if (direction === 'left') {\n    return \"translateX(\".concat(window.innerWidth, \"px) translateX(\").concat(offsetX - rect.left, \"px)\");\n  }\n\n  if (direction === 'right') {\n    return \"translateX(-\".concat(rect.left + rect.width - offsetX, \"px)\");\n  }\n\n  if (direction === 'up') {\n    return \"translateY(\".concat(window.innerHeight, \"px) translateY(\").concat(offsetY - rect.top, \"px)\");\n  } // direction === 'down'\n\n\n  return \"translateY(-\".concat(rect.top + rect.height - offsetY, \"px)\");\n}\n\nexport function setTranslateValue(direction, node) {\n  var transform = getTranslateValue(direction, node);\n\n  if (transform) {\n    node.style.webkitTransform = transform;\n    node.style.transform = transform;\n  }\n}\nvar defaultTimeout = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\n/**\n * The Slide transition is used by the [Drawer](/components/drawers/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nvar Slide = /*#__PURE__*/React.forwardRef(function Slide(props, ref) {\n  var children = props.children,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? 'down' : _props$direction,\n      inProp = props.in,\n      onEnter = props.onEnter,\n      onEntered = props.onEntered,\n      onEntering = props.onEntering,\n      onExit = props.onExit,\n      onExited = props.onExited,\n      onExiting = props.onExiting,\n      style = props.style,\n      _props$timeout = props.timeout,\n      timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout,\n      _props$TransitionComp = props.TransitionComponent,\n      TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,\n      other = _objectWithoutProperties(props, [\"children\", \"direction\", \"in\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"style\", \"timeout\", \"TransitionComponent\"]);\n\n  var theme = useTheme();\n  var childrenRef = React.useRef(null);\n  /**\n   * used in cloneElement(children, { ref: handleRef })\n   */\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    childrenRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRefIntermediary = useForkRef(children.ref, handleOwnRef);\n  var handleRef = useForkRef(handleRefIntermediary, ref);\n\n  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {\n    return function (isAppearing) {\n      if (callback) {\n        // onEnterXxx and onExitXxx callbacks have a different arguments.length value.\n        if (isAppearing === undefined) {\n          callback(childrenRef.current);\n        } else {\n          callback(childrenRef.current, isAppearing);\n        }\n      }\n    };\n  };\n\n  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {\n    setTranslateValue(direction, node);\n    reflow(node);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  });\n  var handleEntering = normalizedTransitionCallback(function (node, isAppearing) {\n    var transitionProps = getTransitionProps({\n      timeout: timeout,\n      style: style\n    }, {\n      mode: 'enter'\n    });\n    node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends({}, transitionProps, {\n      easing: theme.transitions.easing.easeOut\n    }));\n    node.style.transition = theme.transitions.create('transform', _extends({}, transitionProps, {\n      easing: theme.transitions.easing.easeOut\n    }));\n    node.style.webkitTransform = 'none';\n    node.style.transform = 'none';\n\n    if (onEntering) {\n      onEntering(node, isAppearing);\n    }\n  });\n  var handleEntered = normalizedTransitionCallback(onEntered);\n  var handleExiting = normalizedTransitionCallback(onExiting);\n  var handleExit = normalizedTransitionCallback(function (node) {\n    var transitionProps = getTransitionProps({\n      timeout: timeout,\n      style: style\n    }, {\n      mode: 'exit'\n    });\n    node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends({}, transitionProps, {\n      easing: theme.transitions.easing.sharp\n    }));\n    node.style.transition = theme.transitions.create('transform', _extends({}, transitionProps, {\n      easing: theme.transitions.easing.sharp\n    }));\n    setTranslateValue(direction, node);\n\n    if (onExit) {\n      onExit(node);\n    }\n  });\n  var handleExited = normalizedTransitionCallback(function (node) {\n    // No need for transitions when the component is hidden\n    node.style.webkitTransition = '';\n    node.style.transition = '';\n\n    if (onExited) {\n      onExited(node);\n    }\n  });\n  var updatePosition = React.useCallback(function () {\n    if (childrenRef.current) {\n      setTranslateValue(direction, childrenRef.current);\n    }\n  }, [direction]);\n  React.useEffect(function () {\n    // Skip configuration where the position is screen size invariant.\n    if (inProp || direction === 'down' || direction === 'right') {\n      return undefined;\n    }\n\n    var handleResize = debounce(function () {\n      if (childrenRef.current) {\n        setTranslateValue(direction, childrenRef.current);\n      }\n    });\n    window.addEventListener('resize', handleResize);\n    return function () {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [direction, inProp]);\n  React.useEffect(function () {\n    if (!inProp) {\n      // We need to update the position of the drawer when the direction change and\n      // when it's hidden.\n      updatePosition();\n    }\n  }, [inProp, updatePosition]);\n  return /*#__PURE__*/React.createElement(TransitionComponent, _extends({\n    nodeRef: childrenRef,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExited: handleExited,\n    onExiting: handleExiting,\n    appear: true,\n    in: inProp,\n    timeout: timeout\n  }, other), function (state, childProps) {\n    return /*#__PURE__*/React.cloneElement(children, _extends({\n      ref: handleRef,\n      style: _extends({\n        visibility: state === 'exited' && !inProp ? 'hidden' : undefined\n      }, style, children.props.style)\n    }, childProps));\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Slide.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef,\n\n  /**\n   * Direction the child node will enter from.\n   */\n  direction: PropTypes.oneOf(['down', 'left', 'right', 'up']),\n\n  /**\n   * If `true`, show the component; triggers the enter or exit animation.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })])\n} : void 0;\nexport default Slide;"],"sourceRoot":""}