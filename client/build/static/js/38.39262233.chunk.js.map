{"version":3,"sources":["pages/List.jsx","pages/styles/CSSAdminLeftPanel.js","pages/AdminLeftPanel.jsx"],"names":["List","list","child","ClickHandler","DragStart","Component","React","lazy","map","obj","index","fallback","designer","clicked","dragStart","CSSAdminLeftPanel","makeStyles","root","maxWidth","height","leftPanel","listHolder","width","btn","listHeader","backgroundColor","display","alignItems","paddingLeft","paddingRight","justifyContent","listScroller","minHeight","overflowX","overflowY","noMsg","pointerEvents","connect","state","zone","default","quarter","quarterList","yearsList","year","DownloadDatabase","YearChanged","ZoneChanged","QuarterChanged","DownloadSheet","MemberAssigned","AssignDesignersInZone","AssignManagersInZone","amList","designersList","zoneList","classes","getRDList","tobj","data","Number","split","push","name","designation","getList","val","forEach","MatchZones","memberSelected","evt","className","Grid","container","direction","justify","item","value","onChange","target","style","Button","onClick","variant","getRotationData","spacing","Paper","length","id"],"mappings":"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","file":"static/js/38.39262233.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ErrorBoundary from '../ErrorBoundary.jsx';\r\n\r\nconst List = ({list, child, ClickHandler, DragStart}) => {\r\n    const Component = React.lazy(() => import(`./${child}.jsx`));\r\n    return (\r\n        <>\r\n            {\r\n                list.map((obj, index)=>{\r\n                    return (\r\n                        <Suspense key={index} fallback={<div>loading..</div>}>\r\n                            <ErrorBoundary>\r\n                                {\r\n                                    Component!==''?<Component index={index} designer={obj} \r\n                                        clicked={ClickHandler} dragStart={DragStart} />:''\r\n                                }\r\n                            </ErrorBoundary>\r\n                        </Suspense>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nList.propTypes = {\r\n    title:PropTypes.string,\r\n    list:PropTypes.array,\r\n    type:PropTypes.string,\r\n    child:PropTypes.string,\r\n    ClickHandler:PropTypes.func,\r\n    DragStart:PropTypes.func\r\n}\r\n\r\nexport default List;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const CSSAdminLeftPanel = makeStyles({\r\n    root: {\r\n        maxWidth:635,\r\n        height:270\r\n    },\r\n    leftPanel:{\r\n        height:50\r\n    },\r\n    listHolder:{\r\n        width:325\r\n    },\r\n    list:{\r\n        width:'100%'\r\n    },\r\n\r\n    btn:{\r\n        \r\n    },\r\n    listHeader:{\r\n        backgroundColor:'#EEEEEE',\r\n        height:30,\r\n        display:'flex',\r\n        alignItems:'center',\r\n        paddingLeft:5,\r\n        paddingRight:5,\r\n        justifyContent:'space-between'\r\n    },\r\n    listScroller:{\r\n        minHeight:165,\r\n        overflowX:'hidden',\r\n        overflowY:'auto'\r\n    },\r\n    noMsg:{\r\n        display:'flex',\r\n        justifyContent:'center',\r\n        alignItems:'center',\r\n        height:100,\r\n        pointerEvents:'none'\r\n    }\r\n});","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Grid, Button, Paper} from '@material-ui/core';\r\n\r\nimport List from \"./List.jsx\";\r\nimport { MatchZones } from '../utils/Reusables';\r\nimport { ZoneChanged, QuarterChanged, YearChanged, DownloadSheet, MemberAssigned, DownloadDatabase } from \"../redux/actions/Page\";\r\nimport { AssignDesignersInZone } from \"../redux/actions/Designers\";\r\nimport { AssignManagersInZone } from \"../redux/actions/Managers\";\r\nimport { CSSAdminLeftPanel } from \"./styles/CSSAdminLeftPanel\";\r\n\r\nconst AdminLeftPanel = ({amList, designersList, quarter, zoneList, quarterList,\r\n                        QuarterChanged, yearsList, YearChanged, DownloadSheet, year, MemberAssigned, \r\n                        AssignDesignersInZone, AssignManagersInZone, DownloadDatabase}) => {\r\n    \r\n    const classes = CSSAdminLeftPanel();\r\n    const getRDList = (tobj, data) => {\r\n        if(tobj.data[year] && tobj.data[year][Number(quarter.split(\"Q\")[1])-1] && tobj.data[year][Number(quarter.split(\"Q\")[1])-1].zone === data.zone){\r\n            data.list.push({name:tobj.name, designation:tobj.designation});\r\n        }\r\n    }\r\n\r\n    const getRotationData = () => {\r\n        let obj = { quarter:quarter, year:year, list:[] }\r\n        \r\n        zoneList.forEach((value)=>{\r\n            let data = {zone:value, list:[]};\r\n            obj.list.push(data);\r\n\r\n            amList.forEach(tobj => getRDList(tobj, data) );\r\n            designersList.forEach(tobj => getRDList(tobj, data));\r\n        });\r\n\r\n        return obj;\r\n    }\r\n\r\n    const getList = (val) => {\r\n        let list = [];\r\n        amList.forEach((obj)=>{\r\n            let data = obj.data[year] && obj.data[year][Number(quarter.split('Q')[1])-1];\r\n            if(data && data.quarter === quarter && MatchZones(data.zone, val)){\r\n                list.push(obj);\r\n            }\r\n        })\r\n\r\n        designersList.forEach((obj)=>{\r\n            let data = obj.data[year] && obj.data[year][Number(quarter.split('Q')[1])-1];\r\n            if(data && data.quarter === quarter && MatchZones(data.zone, val)){\r\n                list.push(obj);\r\n            }\r\n        })\r\n        return list;\r\n    }\r\n\r\n    const memberSelected = () => { }\r\n\r\n    const dragStart = (evt, val) => {\r\n        MemberAssigned({...val});\r\n    }\r\n\r\n    const assignMemberInZone = () => {\r\n        AssignManagersInZone([...amList], function(){\r\n            AssignDesignersInZone([...designersList], year, quarter);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid className={classes.leftPanel} container direction='row' justify='space-between' alignItems='center'>\r\n                <Grid item>\r\n                    <select value={quarter} onChange={(evt)=>QuarterChanged(evt.target.value)}>\r\n                        {quarterList.map((val,index)=><option key={index}>{val}</option>)}\r\n                    </select>\r\n                    <select value={year} style={{'marginLeft':'10px'}} onChange={(evt)=>YearChanged(evt.target.value)}>\r\n                        {yearsList.map((val,index)=><option key={index}>{val}</option>)}\r\n                    </select>\r\n                </Grid>\r\n                <Grid container style={{width:'62%'}} direction='row' justify='space-between'>\r\n                    <Button onClick={assignMemberInZone}\r\n                        className={classes.btn} variant=\"outlined\">Assign</Button>\r\n                    \r\n                    <Button onClick={()=>DownloadSheet('rotation', getRotationData())} \r\n                        className={classes.btn} variant=\"outlined\">Download</Button>\r\n\r\n                        <Button onClick={()=>DownloadDatabase()} \r\n                            className={classes.btn} variant=\"outlined\">Backup Database</Button>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container direction='row' justify='space-between' spacing={2}>\r\n            {\r\n                zoneList.map((val,index) =>\r\n                <Grid className={classes.listHolder} key={index} item>\r\n                    <Paper className={classes.list}>\r\n                        <div className={classes.listHeader}>\r\n                            <label>{val}</label>\r\n                            <label>{getList(val).length}</label>\r\n                        </div>\r\n                        <div id={\"dlist_\"+index} className={classes.listScroller}>\r\n                            <List list={getList(val)} ClickHandler={memberSelected} DragStart={dragStart} child=\"ListItem\" />\r\n                            {\r\n                                getList(val).length <= 0 && <div className={classes.noMsg}>\r\n                                    <label>No team member assigned in this zone.</label>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </Paper>\r\n                </Grid>\r\n                )\r\n            }\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst stateToProps = state => {\r\n    return {\r\n        zone:state.default.zone,\r\n        quarter:state.default.quarter,\r\n        quarterList:state.default.quarterList,\r\n        yearsList:state.default.yearsList,\r\n        year:state.default.year\r\n    }\r\n}\r\n\r\nAdminLeftPanel.propTypes = {\r\n    amList:PropTypes.array,\r\n    designersList:PropTypes.array,\r\n    zone:PropTypes.string,\r\n    quarter:PropTypes.string,\r\n    quarterList:PropTypes.array,\r\n    ZoneChanged:PropTypes.func,\r\n    QuarterChanged:PropTypes.func,\r\n    yearsList:PropTypes.array,\r\n    year:PropTypes.string,\r\n    YearChanged:PropTypes.func,\r\n    DownloadSheet:PropTypes.func,\r\n    MemberAssigned:PropTypes.func,\r\n    AssignManagersInZone:PropTypes.func,\r\n    AssignDesignersInZone:PropTypes.func,\r\n    DownloadDatabase:PropTypes.func\r\n}\r\n\r\nexport default connect(stateToProps, {DownloadDatabase, YearChanged, ZoneChanged, QuarterChanged, DownloadSheet, MemberAssigned, AssignDesignersInZone, AssignManagersInZone}) (AdminLeftPanel);"],"sourceRoot":""}