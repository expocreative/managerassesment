{"version":3,"sources":["pages/Alert.jsx","pages/styles/CSSForgetPassword.js","pages/ForgetPassword.jsx"],"names":["Alert","props","elevation","variant","CSSForgetPassword","makeStyles","root","flexGrow","height","window","innerHeight","card","width","label","paddingTop","display","input","content","padding","btnHolder","marginTop","textAlign","btn","connect","state","serverError","auth","secretQuestions","default","passwordReset","FPassword","ShowPage","classes","useState","error","setError","question","setQuestion","answer","setAnswer","value","show","password","setPassword","email","setEmail","Grid","container","className","direction","justify","alignItems","Card","CardContent","style","Button","onClick","color","name","type","onChange","evt","target","placeholder","Select","select","displayEmpty","inputProps","Input","MenuItem","map","obj","marginLeft","endAdornment","InputAdornment","position","IconButton","aria-label","onMouseDown","preventDefault","err","search","length","secretQst","qst","alert","severity"],"mappings":"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","file":"static/js/39.905c3a55.chunk.js","sourcesContent":["import React from 'react';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst Alert = (props) => {\r\n    return (\r\n        <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n    )\r\n}\r\n\r\nexport default Alert;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const CSSForgetPassword = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n        height:window.innerHeight-60\r\n    },\r\n    card:{\r\n        width:500,\r\n        height:360\r\n    },\r\n    label:{\r\n        width:120,\r\n        height:30,\r\n        paddingTop:10,\r\n        display:'inline-block'\r\n    },\r\n    input:{\r\n        height:30,\r\n        width:400,\r\n        display:'inline-block'\r\n    },\r\n    content:{\r\n        padding:40\r\n    },\r\n    btnHolder:{\r\n        marginTop:30,\r\n        textAlign:'center'\r\n    },\r\n    btn:{\r\n        width:200\r\n    }\r\n})","import React,{useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Grid, Button, Card, CardContent, Select, MenuItem, Input, IconButton, InputAdornment } from '@material-ui/core';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { FPassword } from '../redux/actions/Auth';\r\nimport Alert from './Alert.jsx';\r\nimport { ShowPage } from '../redux/actions/Page';\r\nimport { CSSForgetPassword } from './styles/CSSForgetPassword';\r\n\r\nconst ForgetPassword = ({secretQuestions, passwordReset, serverError, FPassword, ShowPage})=> {\r\n    const classes = CSSForgetPassword();\r\n    const [error, setError] = useState('');\r\n    const [question, setQuestion] = useState('');\r\n    const [answer, setAnswer] = useState('');\r\n    const [password, setPassword] = useState({value:'', show:false});\r\n    const [email, setEmail] = useState('');\r\n\r\n    const submitHandler = () => {\r\n        let err = ''\r\n        if(email.search('@') == -1 || email.length <= 4 || email.search('.') == -1){\r\n            err = 'please enter valid email address'\r\n        }else if(password.length<6){\r\n            err = 'please enter valid password';\r\n        }else if(answer.length<=2 || question.length<=2){\r\n            err = 'please select question and answer';\r\n        }\r\n\r\n        err.length<=0 ? FPassword({email, password, secretQst:{qst:question, answer:answer}}) : setError(err);\r\n    }\r\n\r\n    return (\r\n        <Grid container className={classes.root} direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n            <Card className={classes.card}>\r\n                <CardContent className={classes.content}>\r\n                    {\r\n                        passwordReset ?\r\n                        <Grid container alignItems='center' justify='center' direction=\"column\" style={{marginTop:75}}>\r\n                            <h4>Password Reset Successfull.</h4>\r\n                            <div style={{marginTop:10}}>\r\n                                please <Button onClick={()=>ShowPage('Login')} variant=\"contained\" color=\"primary\">Login</Button> to continue.\r\n                            </div>\r\n                        </Grid> :\r\n                        <>\r\n                            <div>\r\n                                <label className={classes.label}>Email Address:</label>\r\n                                <input className={classes.input} name=\"email\" value={email} type=\"text\" onChange={(evt)=>setEmail(evt.target.value)} \r\n                                    placeholder=\"please enter valid email\" />\r\n                            </div>\r\n\r\n                            <div style={{paddingTop:40}}>\r\n                                <Select style={{width:200}} className={classes.select} value={question} displayEmpty\r\n                                    inputProps={{ 'aria-label': 'Without label' }} onChange={(evt)=>setQuestion(evt.target.value)} input={<Input />}>\r\n                                    <MenuItem value=\"\"> <em>Select a question</em> </MenuItem>\r\n                                    {\r\n                                        secretQuestions.map((obj) => {\r\n                                            return (\r\n                                                <MenuItem key={obj} value={obj}>{ obj }</MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n\r\n                                <Input style={{marginLeft:20}} value={answer} placeholder='your answer here' onChange={(evt)=>setAnswer(evt.target.value)}/>\r\n                            </div>\r\n\r\n                            <div style={{paddingTop:40}}>\r\n                                <Input style={{width:'100%'}} type={password.show ? 'text' : 'password'} value={password.value} onChange={(evt) => setPassword({...password, value:evt.target.value})} \r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton aria-label=\"toggle password visibility\" onClick={()=>setPassword({...password, show:!password.show})} onMouseDown={(evt)=>evt.preventDefault()} >\r\n                                                {password.show ? <Visibility /> : <VisibilityOff />}\r\n                                            </IconButton>\r\n                                        </InputAdornment> \r\n                                    } \r\n                                />\r\n                            </div>\r\n\r\n                            <div className={classes.btnHolder}>\r\n                                <Button className={classes.btn} variant=\"contained\" color='primary' onClick={submitHandler} >Reset</Button>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </CardContent>\r\n            </Card>\r\n\r\n            {\r\n                (error.length>=5 || serverError.length >= 5) && \r\n                <Alert className={classes.alert} severity=\"error\">{(error.length>=4 && error) || serverError}</Alert>\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst stateToProps = state => {\r\n    return {\r\n        serverError:state.auth.serverError,\r\n        secretQuestions:state.default.secretQuestions,\r\n        passwordReset:state.auth.passwordReset\r\n    }\r\n}\r\n\r\nForgetPassword.propTypes = {\r\n    serverError:PropTypes.string,\r\n    secretQuestions:PropTypes.array,\r\n    FPassword:PropTypes.func,\r\n    ShowPage:PropTypes.func\r\n}\r\n\r\nexport default connect(stateToProps, {FPassword,ShowPage}) (ForgetPassword);"],"sourceRoot":""}